generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  city           String?
  country        String?
  dob            DateTime?
  state          String?
  street_address String?
  zip_code       String?
  accounts       Account[]
  subscriptions  Customer[]
  PdfFiles       PdfFile[]
  sessions       Session[]
}

model Customer {
  id                   String       @id @default(cuid())
  userId               String
  stripe_customer_id   String
  billingPlan          BillingPlan?
  generated_pdfs_count Int          @default(0)
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PdfFile {
  id         String   @id @default(cuid())
  userId     String
  pdf_url    String
  file_name  String
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String  @id
  active      Boolean @default(true)
  name        String
  description String?
  image       String?
  metadata    Json?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BillingPlan {
  standard
  pro
  business
  enterprise
}
